// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: proto/user/proto/user.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CreatorService_Register_FullMethodName          = "/user.CreatorService/Register"
	CreatorService_Login_FullMethodName             = "/user.CreatorService/Login"
	CreatorService_LoginWithTelegram_FullMethodName = "/user.CreatorService/LoginWithTelegram"
)

// CreatorServiceClient is the client API for CreatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreatorServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CreatorLoginResponse, error)
	Login(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CreatorLoginResponse, error)
	LoginWithTelegram(ctx context.Context, in *TelegramLoginRequest, opts ...grpc.CallOption) (*CreatorLoginResponse, error)
}

type creatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreatorServiceClient(cc grpc.ClientConnInterface) CreatorServiceClient {
	return &creatorServiceClient{cc}
}

func (c *creatorServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CreatorLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatorLoginResponse)
	err := c.cc.Invoke(ctx, CreatorService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) Login(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CreatorLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatorLoginResponse)
	err := c.cc.Invoke(ctx, CreatorService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) LoginWithTelegram(ctx context.Context, in *TelegramLoginRequest, opts ...grpc.CallOption) (*CreatorLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatorLoginResponse)
	err := c.cc.Invoke(ctx, CreatorService_LoginWithTelegram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreatorServiceServer is the server API for CreatorService service.
// All implementations must embed UnimplementedCreatorServiceServer
// for forward compatibility
type CreatorServiceServer interface {
	Register(context.Context, *RegisterRequest) (*CreatorLoginResponse, error)
	Login(context.Context, *RegisterRequest) (*CreatorLoginResponse, error)
	LoginWithTelegram(context.Context, *TelegramLoginRequest) (*CreatorLoginResponse, error)
	mustEmbedUnimplementedCreatorServiceServer()
}

// UnimplementedCreatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCreatorServiceServer struct {
}

func (UnimplementedCreatorServiceServer) Register(context.Context, *RegisterRequest) (*CreatorLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCreatorServiceServer) Login(context.Context, *RegisterRequest) (*CreatorLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCreatorServiceServer) LoginWithTelegram(context.Context, *TelegramLoginRequest) (*CreatorLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithTelegram not implemented")
}
func (UnimplementedCreatorServiceServer) mustEmbedUnimplementedCreatorServiceServer() {}

// UnsafeCreatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreatorServiceServer will
// result in compilation errors.
type UnsafeCreatorServiceServer interface {
	mustEmbedUnimplementedCreatorServiceServer()
}

func RegisterCreatorServiceServer(s grpc.ServiceRegistrar, srv CreatorServiceServer) {
	s.RegisterService(&CreatorService_ServiceDesc, srv)
}

func _CreatorService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreatorService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreatorService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).Login(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_LoginWithTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).LoginWithTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreatorService_LoginWithTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).LoginWithTelegram(ctx, req.(*TelegramLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreatorService_ServiceDesc is the grpc.ServiceDesc for CreatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.CreatorService",
	HandlerType: (*CreatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _CreatorService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CreatorService_Login_Handler,
		},
		{
			MethodName: "LoginWithTelegram",
			Handler:    _CreatorService_LoginWithTelegram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/proto/user.proto",
}

const (
	VoterService_LoginWithTelegram_FullMethodName = "/user.VoterService/LoginWithTelegram"
	VoterService_UpdateProfile_FullMethodName     = "/user.VoterService/UpdateProfile"
	VoterService_GetById_FullMethodName           = "/user.VoterService/GetById"
)

// VoterServiceClient is the client API for VoterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoterServiceClient interface {
	LoginWithTelegram(ctx context.Context, in *TelegramLoginRequest, opts ...grpc.CallOption) (*VoterLoginResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateVoterProfileRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetById(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserInfo, error)
}

type voterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoterServiceClient(cc grpc.ClientConnInterface) VoterServiceClient {
	return &voterServiceClient{cc}
}

func (c *voterServiceClient) LoginWithTelegram(ctx context.Context, in *TelegramLoginRequest, opts ...grpc.CallOption) (*VoterLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoterLoginResponse)
	err := c.cc.Invoke(ctx, VoterService_LoginWithTelegram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voterServiceClient) UpdateProfile(ctx context.Context, in *UpdateVoterProfileRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, VoterService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voterServiceClient) GetById(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, VoterService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoterServiceServer is the server API for VoterService service.
// All implementations must embed UnimplementedVoterServiceServer
// for forward compatibility
type VoterServiceServer interface {
	LoginWithTelegram(context.Context, *TelegramLoginRequest) (*VoterLoginResponse, error)
	UpdateProfile(context.Context, *UpdateVoterProfileRequest) (*EmptyResponse, error)
	GetById(context.Context, *UserIdRequest) (*UserInfo, error)
	mustEmbedUnimplementedVoterServiceServer()
}

// UnimplementedVoterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoterServiceServer struct {
}

func (UnimplementedVoterServiceServer) LoginWithTelegram(context.Context, *TelegramLoginRequest) (*VoterLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithTelegram not implemented")
}
func (UnimplementedVoterServiceServer) UpdateProfile(context.Context, *UpdateVoterProfileRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedVoterServiceServer) GetById(context.Context, *UserIdRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedVoterServiceServer) mustEmbedUnimplementedVoterServiceServer() {}

// UnsafeVoterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoterServiceServer will
// result in compilation errors.
type UnsafeVoterServiceServer interface {
	mustEmbedUnimplementedVoterServiceServer()
}

func RegisterVoterServiceServer(s grpc.ServiceRegistrar, srv VoterServiceServer) {
	s.RegisterService(&VoterService_ServiceDesc, srv)
}

func _VoterService_LoginWithTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoterServiceServer).LoginWithTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoterService_LoginWithTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoterServiceServer).LoginWithTelegram(ctx, req.(*TelegramLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoterService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoterProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoterServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoterService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoterServiceServer).UpdateProfile(ctx, req.(*UpdateVoterProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoterService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoterServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoterService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoterServiceServer).GetById(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoterService_ServiceDesc is the grpc.ServiceDesc for VoterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.VoterService",
	HandlerType: (*VoterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginWithTelegram",
			Handler:    _VoterService_LoginWithTelegram_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _VoterService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _VoterService_GetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/proto/user.proto",
}
