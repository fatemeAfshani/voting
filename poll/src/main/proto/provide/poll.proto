syntax = "proto3";

package poll;

service PollService {
  rpc createPoll(CreatePollRequest) returns (PollResponse);
  rpc updatePoll(UpdatePollRequest) returns (Empty);
  rpc addQuestion(AddQuestionRequest) returns (Empty);
  rpc getActivePolls(Empty) returns (GetActivePollsResponse);

  rpc startPoll(StartPollRequest) returns (PollResponse);
  rpc closePoll(RequestWithPollId) returns (PollResponse);
  rpc getPollStatus(RequestWithPollId) returns (PollStatusResponse);
  rpc payForPoll(PayForPollRequest) returns (PollResponse);
  rpc startVoting(StartVotingRequest) returns (StartVotingResponse);
  rpc answerQuestion(AnswerQuestionRequest) returns (AnswerQuestionResponse);
  rpc getReport(PollReportRequest) returns (PollReportResponse);
}

message Empty {}

message PollInfo {
  string title = 1;
  string description = 2;
  map<string, string> preferences = 3;
  int32 remainingVoters = 4;
  string pollId = 5;
}

message GetActivePollsResponse {
  repeated PollInfo polls = 1;
}

message CreatePollRequest {
  optional string title = 1;
  optional string description = 2;
}

message UpdatePollRequest {
  string pollId = 1;
  optional int32 maxVoters = 2;
  map<string, string> preferences = 3;
  optional string title = 4;
  optional string description = 5;
}

message AddQuestionRequest{
  string pollId = 1;
  string questionText = 2;
  QuestionType questionType = 3;
  repeated string options = 4;
  bool shouldAnswer = 5;
}

message Option {
  string optionId = 1;
  string optionText = 2;
}

message Question {
  string pollId = 1;
  string questionId =2;
  string questionText = 3;
  QuestionType questionType = 4;
  repeated Option options = 5;
  bool shouldAnswer = 6;
}
message StartPollRequest {
  string pollId = 1;
  optional string startTime = 2;
  optional string endTime = 3;
}
message RequestWithPollId {
  string pollId = 1;
}

message PayForPollRequest {
  string pollId = 1;
  PaymentMode mode = 2;
}

message PollResponse {
  string pollId = 1;
  PollStatus status = 2;
}

message StartVotingRequest {
  string pollId = 1;
}

message StartVotingResponse {
  Question firstQuestion = 1;
  optional string currentAnswer = 2;
}

message AnswerQuestionRequest {
  string pollId = 1;
  string questionId = 2;
  string answer = 3;
}

message AnswerQuestionResponse {
  Question nextQuestion = 1;
  optional string nextAnswer = 2;
  Question previousQuestion = 3;
  optional string previousAnswer = 4;
}

message PollReportRequest {
  string pollId = 1;
}

message PollReportResponse {
  bytes excelFile = 1;
  string fileName = 2;
}

message PollStatusResponse {
  string pollId = 1;
  PollStatus status = 2;
  int32 votesCount = 3;
  string startTime = 4;
  string endTime = 5;
  int32 maxVoters = 6;
}

enum QuestionType {
EXPLAIN =0;
TWO_OPTION=1;
MULTIPLE_CHOICE=2;
}
enum PollStatus { DRAFT = 0; SCHEDULED = 1; ACTIVE = 2; CLOSED = 3; }
enum PaymentMode { PAY_BEFORE = 0; PAY_DURING = 1; PAY_LATER = 2; }
